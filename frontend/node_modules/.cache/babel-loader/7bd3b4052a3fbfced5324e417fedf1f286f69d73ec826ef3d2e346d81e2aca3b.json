{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\navad\\\\blood-donor-backend\\\\frontend\\\\src\\\\components\\\\DonorList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DonorList = () => {\n  _s();\n  const [donors, setDonors] = useState([]);\n  const [refresh, setRefresh] = useState(false);\n  useEffect(() => {\n    const fetchDonors = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/donors\", {\n          headers: {\n            \"Cache-Control\": \"no-cache\"\n          }\n        });\n        console.log(\"✅ Fetched Donors:\", response.data); // Adjust API URL if needed\n        setDonors(response.data);\n      } catch (error) {\n        console.error(\"Error fetching donors:\", error);\n      }\n    };\n    fetchDonors();\n  }, [refresh]);\n\n  // ✅ Register Plasma Donor Function\n  const registerPlasmaDonor = async donorId => {\n    try {\n      console.log(\"🔄 Sending plasma donor update request for ID:\", donorId);\n      const response = await axios.post(\"http://localhost:5000/api/donors/plasma-donors\", {\n        donorId\n      });\n      console.log(\"✅ Plasma donor updated:\", response.data);\n      setRefresh(prev => !prev);\n\n      // ✅ Update UI to reflect plasma donor status\n      setDonors(prevDonors => prevDonors.map(donor => donor._id === donorId ? {\n        ...donor,\n        plasmaDonor: true\n      } : donor));\n    } catch (error) {\n      console.error(\"❌ Error updating plasma donor:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"\\uD83C\\uDFC5 Donor List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\",\n      children: donors.map(donor => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-5 rounded-xl shadow-lg border border-gray-200 transition-transform transform hover:scale-105 hover:shadow-2xl\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold text-gray-800\",\n          children: [\"\\uD83D\\uDC64 \", donor.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600\",\n          children: [\"\\uD83E\\uDE78 Blood Type: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-bold text-red-500\",\n            children: donor.bloodType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600\",\n          children: [\"\\uD83D\\uDCCD City: \", donor.city]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600\",\n          children: [\"\\uD83D\\uDCDE Contact: \", donor.contact]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600\",\n          children: [\"\\uD83C\\uDFC6 Donations: \", donor.donationCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), donor.plasmaDonor && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"plasma-badge\",\n          children: \"\\uD83D\\uDD25 Plasma Donor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this), !donor.plasmaDonor && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => registerPlasmaDonor(donor._id),\n          className: \"bg-blue-500 text-white px-3 py-1 rounded mt-2 hover:bg-blue-700\",\n          children: \"Donate Plasma\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `badge ${getBadgeClass(donor.badge)}`,\n          children: donor.badge\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, donor._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n// Badge Styles\n_s(DonorList, \"OvAi4SKtwtx2val6p5neAx/C4sk=\");\n_c = DonorList;\nconst getBadgeClass = badge => {\n  switch (badge) {\n    case \"Gold Donor\":\n      return \"bg-yellow-500 text-white\";\n    case \"Silver Donor\":\n      return \"bg-gray-400 text-white\";\n    case \"Bronze Donor\":\n      return \"bg-orange-500 text-white\";\n    default:\n      return \"bg-blue-500 text-white\";\n  }\n};\nexport default DonorList;\nvar _c;\n$RefreshReg$(_c, \"DonorList\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","DonorList","_s","donors","setDonors","refresh","setRefresh","fetchDonors","response","get","headers","console","log","data","error","registerPlasmaDonor","donorId","post","prev","prevDonors","map","donor","_id","plasmaDonor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","bloodType","city","contact","donationCount","onClick","getBadgeClass","badge","_c","$RefreshReg$"],"sources":["C:/Users/navad/blood-donor-backend/frontend/src/components/DonorList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst DonorList = () => {\r\n  const [donors, setDonors] = useState([]);\r\n  const [refresh, setRefresh] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchDonors = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/donors\",{\r\n          headers: { \"Cache-Control\": \"no-cache\" },  \r\n        } );\r\n        console.log(\"✅ Fetched Donors:\", response.data);// Adjust API URL if needed\r\n        setDonors(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching donors:\", error);\r\n      }\r\n    };\r\n\r\n    fetchDonors();\r\n  }, [refresh]);\r\n\r\n  // ✅ Register Plasma Donor Function\r\n  const registerPlasmaDonor = async (donorId) => {\r\n    try {\r\n      console.log(\"🔄 Sending plasma donor update request for ID:\", donorId);\r\n\r\n      const response = await axios.post(\"http://localhost:5000/api/donors/plasma-donors\", {\r\n        donorId,\r\n      });\r\n\r\n      console.log(\"✅ Plasma donor updated:\", response.data);\r\n      setRefresh((prev) => !prev);\r\n\r\n      // ✅ Update UI to reflect plasma donor status\r\n      setDonors((prevDonors) =>\r\n        prevDonors.map((donor) =>\r\n          donor._id === donorId ? { ...donor, plasmaDonor: true } : donor\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error(\"❌ Error updating plasma donor:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">🏅 Donor List</h2>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n        {donors.map((donor) => (\r\n          <div\r\n            key={donor._id}\r\n            className=\"bg-white p-5 rounded-xl shadow-lg border border-gray-200 transition-transform transform hover:scale-105 hover:shadow-2xl\"\r\n          >\r\n            <h3 className=\"text-lg font-semibold text-gray-800\">👤 {donor.name}</h3>\r\n            <p className=\"text-sm text-gray-600\">\r\n              🩸 Blood Type: <span className=\"font-bold text-red-500\">{donor.bloodType}</span>\r\n            </p>\r\n            <p className=\"text-sm text-gray-600\">📍 City: {donor.city}</p>\r\n            <p className=\"text-sm text-gray-600\">📞 Contact: {donor.contact}</p>\r\n            <p className=\"text-sm text-gray-600\">🏆 Donations: {donor.donationCount}</p>\r\n\r\n            {/* ✅ Plasma Donor Badge */}\r\n            {donor.plasmaDonor && (\r\n              <span className=\"plasma-badge\">🔥 Plasma Donor</span>\r\n            )}\r\n\r\n            {/* ✅ Plasma Donation Button */}\r\n            {!donor.plasmaDonor && (\r\n              <button\r\n                onClick={() => registerPlasmaDonor(donor._id)}\r\n                className=\"bg-blue-500 text-white px-3 py-1 rounded mt-2 hover:bg-blue-700\"\r\n              >\r\n                Donate Plasma\r\n              </button>\r\n            )}\r\n\r\n            {/* Badge Display */}\r\n            <span className={`badge ${getBadgeClass(donor.badge)}`}>\r\n              {donor.badge}\r\n            </span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Badge Styles\r\nconst getBadgeClass = (badge) => {\r\n  switch (badge) {\r\n    case \"Gold Donor\":\r\n      return \"bg-yellow-500 text-white\";\r\n    case \"Silver Donor\":\r\n      return \"bg-gray-400 text-white\";\r\n    case \"Bronze Donor\":\r\n      return \"bg-orange-500 text-white\";\r\n    default:\r\n      return \"bg-blue-500 text-white\";\r\n  }\r\n};\r\n\r\nexport default DonorList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7CD,SAAS,CAAC,MAAM;IACd,MAAMW,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,kCAAkC,EAAC;UAClEC,OAAO,EAAE;YAAE,eAAe,EAAE;UAAW;QACzC,CAAE,CAAC;QACHC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAChDT,SAAS,CAACI,QAAQ,CAACK,IAAI,CAAC;MAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAEDP,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACF,OAAO,CAAC,CAAC;;EAEb;EACA,MAAMU,mBAAmB,GAAG,MAAOC,OAAO,IAAK;IAC7C,IAAI;MACFL,OAAO,CAACC,GAAG,CAAC,gDAAgD,EAAEI,OAAO,CAAC;MAEtE,MAAMR,QAAQ,GAAG,MAAMV,KAAK,CAACmB,IAAI,CAAC,gDAAgD,EAAE;QAClFD;MACF,CAAC,CAAC;MAEFL,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEJ,QAAQ,CAACK,IAAI,CAAC;MACrDP,UAAU,CAAEY,IAAI,IAAK,CAACA,IAAI,CAAC;;MAE3B;MACAd,SAAS,CAAEe,UAAU,IACnBA,UAAU,CAACC,GAAG,CAAEC,KAAK,IACnBA,KAAK,CAACC,GAAG,KAAKN,OAAO,GAAG;QAAE,GAAGK,KAAK;QAAEE,WAAW,EAAE;MAAK,CAAC,GAAGF,KAC5D,CACF,CAAC;IACH,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF,CAAC;EAED,oBACEd,OAAA;IAAKwB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBzB,OAAA;MAAIwB,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1D7B,OAAA;MAAKwB,SAAS,EAAC,sDAAsD;MAAAC,QAAA,EAClEtB,MAAM,CAACiB,GAAG,CAAEC,KAAK,iBAChBrB,OAAA;QAEEwB,SAAS,EAAC,0HAA0H;QAAAC,QAAA,gBAEpIzB,OAAA;UAAIwB,SAAS,EAAC,qCAAqC;UAAAC,QAAA,GAAC,eAAG,EAACJ,KAAK,CAACS,IAAI;QAAA;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxE7B,OAAA;UAAGwB,SAAS,EAAC,uBAAuB;UAAAC,QAAA,GAAC,2BACpB,eAAAzB,OAAA;YAAMwB,SAAS,EAAC,wBAAwB;YAAAC,QAAA,EAAEJ,KAAK,CAACU;UAAS;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/E,CAAC,eACJ7B,OAAA;UAAGwB,SAAS,EAAC,uBAAuB;UAAAC,QAAA,GAAC,qBAAS,EAACJ,KAAK,CAACW,IAAI;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9D7B,OAAA;UAAGwB,SAAS,EAAC,uBAAuB;UAAAC,QAAA,GAAC,wBAAY,EAACJ,KAAK,CAACY,OAAO;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpE7B,OAAA;UAAGwB,SAAS,EAAC,uBAAuB;UAAAC,QAAA,GAAC,0BAAc,EAACJ,KAAK,CAACa,aAAa;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAG3ER,KAAK,CAACE,WAAW,iBAChBvB,OAAA;UAAMwB,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CACrD,EAGA,CAACR,KAAK,CAACE,WAAW,iBACjBvB,OAAA;UACEmC,OAAO,EAAEA,CAAA,KAAMpB,mBAAmB,CAACM,KAAK,CAACC,GAAG,CAAE;UAC9CE,SAAS,EAAC,iEAAiE;UAAAC,QAAA,EAC5E;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT,eAGD7B,OAAA;UAAMwB,SAAS,EAAE,SAASY,aAAa,CAACf,KAAK,CAACgB,KAAK,CAAC,EAAG;UAAAZ,QAAA,EACpDJ,KAAK,CAACgB;QAAK;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC;MAAA,GA7BFR,KAAK,CAACC,GAAG;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OA8BX,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;;AAED;AAAA3B,EAAA,CAtFMD,SAAS;AAAAqC,EAAA,GAATrC,SAAS;AAuFf,MAAMmC,aAAa,GAAIC,KAAK,IAAK;EAC/B,QAAQA,KAAK;IACX,KAAK,YAAY;MACf,OAAO,0BAA0B;IACnC,KAAK,cAAc;MACjB,OAAO,wBAAwB;IACjC,KAAK,cAAc;MACjB,OAAO,0BAA0B;IACnC;MACE,OAAO,wBAAwB;EACnC;AACF,CAAC;AAED,eAAepC,SAAS;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}