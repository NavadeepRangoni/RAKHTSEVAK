{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000/api\"; // Ensure this matches your backend URL\n\n// Fetch all donor posts\nexport const fetchPosts = async () => {\n  try {\n    return await axios.get(\"http://localhost:5000/api/users/register\", userdata);\n  } catch (error) {\n    var _error$response;\n    console.error(\"❌ Error fetching posts:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\n\n// Register a new user\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/users/register`, userData);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error(\"❌ Registration failed:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw error;\n  }\n};\n\n// Login a user\nexport const loginUser = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/users/login`, userData);\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    console.error(\"❌ Login failed:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","fetchPosts","get","userdata","error","_error$response","console","response","data","message","registerUser","userData","post","_error$response2","loginUser","_error$response3"],"sources":["C:/Users/navad/blood-donor-backend/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000/api\"; // Ensure this matches your backend URL\r\n\r\n// Fetch all donor posts\r\nexport const fetchPosts = async () => {\r\n  try {\r\n    return await axios.get(\"http://localhost:5000/api/users/register\",userdata);\r\n  } catch (error) {\r\n    console.error(\"❌ Error fetching posts:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Register a new user\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/users/register`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"❌ Registration failed:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Login a user\r\nexport const loginUser = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/users/login`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"❌ Login failed:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,OAAO,MAAMF,KAAK,CAACG,GAAG,CAAC,0CAA0C,EAACC,QAAQ,CAAC;EAC7E,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA;IACdC,OAAO,CAACF,KAAK,CAAC,yBAAyB,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACG,QAAQ,cAAAF,eAAA,uBAAdA,eAAA,CAAgBG,IAAI,KAAIJ,KAAK,CAACK,OAAO,CAAC;IAC/E,MAAML,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACF,MAAMJ,QAAQ,GAAG,MAAMR,KAAK,CAACa,IAAI,CAAC,GAAGZ,OAAO,iBAAiB,EAAEW,QAAQ,CAAC;IACxE,OAAOJ,QAAQ,CAACC,IAAI;EACtB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IAAA,IAAAS,gBAAA;IACdP,OAAO,CAACF,KAAK,CAAC,wBAAwB,EAAE,EAAAS,gBAAA,GAAAT,KAAK,CAACG,QAAQ,cAAAM,gBAAA,uBAAdA,gBAAA,CAAgBL,IAAI,KAAIJ,KAAK,CAACK,OAAO,CAAC;IAC9E,MAAML,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMU,SAAS,GAAG,MAAOH,QAAQ,IAAK;EAC3C,IAAI;IACF,MAAMJ,QAAQ,GAAG,MAAMR,KAAK,CAACa,IAAI,CAAC,GAAGZ,OAAO,cAAc,EAAEW,QAAQ,CAAC;IACrE,OAAOJ,QAAQ,CAACC,IAAI;EACtB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IAAA,IAAAW,gBAAA;IACdT,OAAO,CAACF,KAAK,CAAC,iBAAiB,EAAE,EAAAW,gBAAA,GAAAX,KAAK,CAACG,QAAQ,cAAAQ,gBAAA,uBAAdA,gBAAA,CAAgBP,IAAI,KAAIJ,KAAK,CAACK,OAAO,CAAC;IACvE,MAAML,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}